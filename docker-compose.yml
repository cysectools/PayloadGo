version: '3.8'

services:
  # PayloadGo Application
  payloadgo:
    build: .
    container_name: payloadgo
    ports:
      - "8080:8080"  # API port
      - "9090:9090"  # Metrics port
      - "9091:9091"  # Health check port
    environment:
      - PAYLOADGO_DB_HOST=postgres
      - PAYLOADGO_DB_PORT=5432
      - PAYLOADGO_DB_NAME=payloadgo
      - PAYLOADGO_DB_USER=payloadgo
      - PAYLOADGO_DB_PASSWORD=payloadgo
      - PAYLOADGO_REDIS_HOST=redis
      - PAYLOADGO_REDIS_PORT=6379
      - PAYLOADGO_VAULT_ADDR=http://vault:8200
      - PAYLOADGO_VAULT_TOKEN=root
      - PAYLOADGO_JWT_SECRET=your-jwt-secret-key
      - PAYLOADGO_ENCRYPTION_KEY=your-encryption-key-32-bytes
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./evidence:/app/evidence
      - ./configs:/app/configs
    depends_on:
      - postgres
      - redis
      - vault
    networks:
      - payloadgo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: payloadgo-postgres
    environment:
      - POSTGRES_DB=payloadgo
      - POSTGRES_USER=payloadgo
      - POSTGRES_PASSWORD=payloadgo
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - payloadgo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U payloadgo -d payloadgo"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: payloadgo-redis
    command: redis-server --appendonly yes --requirepass payloadgo
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - payloadgo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # HashiCorp Vault
  vault:
    image: vault:1.15
    container_name: payloadgo-vault
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - ./configs/vault.hcl:/vault/config/vault.hcl
    networks:
      - payloadgo-network
    restart: unless-stopped
    cap_add:
      - IPC_LOCK
    command: vault server -config=/vault/config/vault.hcl

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: payloadgo-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - payloadgo-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: payloadgo-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - payloadgo-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: payloadgo-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - payloadgo-network
    restart: unless-stopped

  # Elasticsearch (for log aggregation)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: payloadgo-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - payloadgo-network
    restart: unless-stopped

  # Kibana (for log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: payloadgo-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - payloadgo-network
    restart: unless-stopped
    depends_on:
      - elasticsearch

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: payloadgo-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/ssl:/etc/nginx/ssl
    networks:
      - payloadgo-network
    restart: unless-stopped
    depends_on:
      - payloadgo

  # MinIO (for file storage)
  minio:
    image: minio/minio:latest
    container_name: payloadgo-minio
    environment:
      - MINIO_ROOT_USER=payloadgo
      - MINIO_ROOT_PASSWORD=payloadgo123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - payloadgo-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  vault_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  payloadgo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
